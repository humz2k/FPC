//this is a comment

kernel add2D[i](const float* in, float mul, float* out){
    out[thread.i*3] += in[thread.i*3] * mul;
    out[thread.i*3+1] += in[thread.i*3+1] * mul;
    out[thread.i*3+2] += in[thread.i*3+2] * mul;
}

kernel calc_acc[i](const float* in, float* out, int n){
    float my_x, my_y, my_z;
    my_x = in[thread.i*3]; my_y = in[thread.i*3+1]; my_z = in[thread.i*3+2];
    float other_x, other_y, other_z;
    float dx, dy, dz;
    float r2;
    float mul;
    float acc_x, acc_y, acc_z;
    acc_x = 0f; acc_y = 0f; acc_z = 0f;
    for (int i = 0; i < n; i++){
        if (i != thread.i){
            other_x = in[i*3];
            other_y = in[i*3+1];
            other_z = in[i*3+2];
            dx = other_x - my_x;
            dy = other_y - my_y;
            dz = other_z - my_z;
            r2 = dx*dx + dy*dy + dz*dz;
            if (r2 != 0f){
                mul = sqrt(1f/r2);
                acc_x += mul*dx; acc_y += mul*dy; acc_z += mul*dz;
            }
        }
    }
    out[thread.i*3] = acc_x;
    out[thread.i*3+1] = acc_y;
    out[thread.i*3+2] = acc_z;
}