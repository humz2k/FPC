#!/usr/bin/env python3

import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'src')))
import fpcc_lib
import argparse

if __name__ == "__main__":
    #preprocessed,kernel_file = fpcc_lib.extract_kernels("preprocessed.cpp")
    #with open("tmp.cpp","w") as f:
    #    f.write(preprocessed)
    #with open("tmp.fpc","w") as f:
    #    f.write(kernel_file)
    parser = argparse.ArgumentParser(description="Compile .cfpc")
    parser.add_argument('files',metavar="<cfpcfile>",type=str, nargs='+')
    parser.add_argument('--target','-t',metavar="<target>",
                        required=True,
                        choices=["Metal"])
    parser.add_argument('-o',metavar="<output>",type=str,default="a.out")
    parser.add_argument('--save-temps','-S',action='store_true',default=False)
    args = parser.parse_args()
    c_files = []
    header_files = []
    for fname in args.files:
        c_file,kernel_file,this_header = fpcc_lib.preprocess(args.files[0])
        fpcc_lib.compile_lib([kernel_file],"Metal",this_header,keep_temps=args.save_temps)
        c_files.append(c_file)
        header_files.append(this_header)
        if not args.save_temps:
            os.remove(kernel_file)

    metal_cpp_dir = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'metal-cpp'))
    metal_extensions_cpp_dir = os.path.abspath(os.path.join(os.path.dirname( __file__ ), '..', 'metal-cpp-extensions'))

    CC="clang++"
    CFLAGS="-Wall -std=c++17 -I" + metal_cpp_dir + " -I" + metal_extensions_cpp_dir + " -fno-objc-arc"
    LDFLAGS="-framework Metal -framework Foundation -framework Cocoa -framework CoreGraphics -framework MetalKit"
    os.system(CC + " " + " ".join(c_files) + " " + CFLAGS + " " + LDFLAGS + " -o " + args.o)

    if not args.save_temps:
        for c_file in c_files:
            os.remove(c_file)
        for this_header in header_files:
            os.remove(this_header)
        #fpcc_lib.compile_lib(args.files,args.target,args.o,keep_temps=args.save_temps)
