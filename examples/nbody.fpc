#include <stdio.h>
#include <stdlib.h>
#include <math.h>

float frand(){
    return (float)rand()/(float)RAND_MAX;
}

__host__ __device__ inline float3 calc_force(const float3 p_i, const float3 p_j, float eps, float3* out){
    float3 diff = make_float3(p_j.x - p_i.x,p_j.y - p_i.y,p_j.z - p_i.z);
    float dist2 = diff.x * diff.x + diff.y * diff.y + diff.z * diff.z + eps;
    float force = rsqrtf(dist2 * dist2 * dist2);
    out->x += diff.x * force;
    out->y += diff.y * force;
    out->z += diff.z * force;
}

__global__ void interaction_kernel(const float3* restrict d_particles, float3* restrict acc, float eps, int n){
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    if (idx > n)return;

    float3 p_i = d_particles[idx];
    float3 force = make_float3(0,0,0);

    for (int j = 0; j < n; j++){
        if (j == idx)continue;
        float3 p_j = d_particles[j];
        calc_force(p_i,p_j,eps,&force);
    }
    acc[idx] = force;
}

void interaction_loop(const float3* restrict particles, float3* restrict acc, float eps, int n){
    for (int i = 0; i < n; i++){
        float3 p_i = particles[i];
        float3 force = make_float3(0,0,0);
        for (int j = 0; j < n; j++){
            if (i == j)continue;
            float3 p_j = particles[j];
            calc_force(p_i,p_j,eps,&force);
        }
        acc[i] = force;
    }
}

int main(){

    int n = 10000;
    int blockSize = 128;
    int numBlocks = (n + (blockSize - 1))/blockSize;
    float eps = 0.1;

    float3* d_particles; fpcMalloc(&d_particles,sizeof(float3) * n);
    float3* d_acc; fpcMalloc(&d_acc,sizeof(float3) * n);
    float3* h_particles = (float3*)malloc(sizeof(float3) * n);
    float3* h_acc = (float3*)malloc(sizeof(float3) * n);

    for (int i = 0; i < n; i++){
        h_particles[i].x = frand() * 3;
        h_particles[i].y = frand() * 3;
        h_particles[i].z = frand() * 3;
    }

    fpcMemcpy(d_particles,h_particles,sizeof(float3) * n, fpcMemcpyHostToDevice);

    interaction_kernel<<<numBlocks,blockSize>>>(d_particles,d_acc,eps,n);

    interaction_loop(d_particles,d_acc,eps,n);

    free(h_particles);
    free(h_acc);
    fpcFree(d_particles);
    fpcFree(d_acc);

    return 0;
}