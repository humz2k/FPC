#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#include "../../include/fpc_headers.hpp"

device kernel add_arr[i](const float* inA, const float* inB, float* out){
    out[thread.i] = inA[thread.i] + inB[thread.i];
}

int main(){
    
    FPC_init();

    int n = 512;

    int blockSize = 512;
    int numBlocks = 1;

    float* h_inA = (float*)malloc(n * sizeof(float));
    float* h_inB = (float*)malloc(n * sizeof(float));
    float* h_result = (float*)malloc(n * sizeof(float));

    for (int i = 0; i < (n); i++){
        h_inA[i] = (float)i;
        h_inB[i] = (float)i;
    }

    FPC::Buffer d_inA;
    FPC::Buffer d_inB;
    FPC::Buffer d_result;

    d_inA.allocate<float>(n);
    d_inB.allocate<float>(n);
    d_result.allocate<float>(n);

    d_inA.set(h_inA);
    d_inB.set(h_inB);

    long first,second;

    first = clock();

    add_arr({numBlocks},{blockSize},d_inA,d_inB,d_result);

    second = clock();

    double time = ((double)(second-first))/((double)CLOCKS_PER_SEC);

    d_result.get(h_result);

    for (int i = 0; i < 10; i++){
        printf("%f ",h_result[i]);
    }

    printf("\nTime (s): %f\n",time);

    free(h_inA);
    free(h_inB);
    free(h_result);

    return 0;
}